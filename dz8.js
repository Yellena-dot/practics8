'use strict';
// массивы
const arr = [1, 2, 3, 6, 8];

/* метод, который работает с концом массива
pop() - удаляет последний элемент в массиве*/

arr.pop();
console.log(arr);

/*метод, который добавляет элемент в массив
push() - добавляет элемент в конец массива*/

const aray = [1, 2, 3, 6, 8];
aray.push(10);
console.log(aray);

/* методы shift()/unshift() - добавляют и удаляют элементы с начала массива, 
обычно редко используются, так как меняется индекс элементов при их использовании*/

// пример №1 - перебрать массив используем цикл for

const array = [1, 2, 3, 6, 8];
for (let i = 0; i < array.length; i++) {
  console.log(array[i]);
}

// Пример №2 - перебрать массив используем цикл for of - здесь break и continue сработают - это отличие от forEach

const arrays = [1, 2, 3, 6, 8];
for (let value of arrays) {
  console.log(value);
}

// сво-ва length
/* как соотносятся между собой сво-ва length и порядковые номера элементов внутри массива: 
 - length состоит из последнего индекса, который есть в массиве плюс 1*/

const ar = [1, 2, 3, 6, 8];
console.log(ar.length);

ar[99] = 0;
console.log(ar.length);
console.log(ar);

//forEach - позволяет перебрать все элементы, кот. наход-ся внутри массива, здесь break и continue НЕ сработают

/* зададим callback функцию, она в себя может принимать три аргумента:
- item - название может быть любое,  - это тот элемент,
  кот. мы сейчас перебираем([1, 2, 3, 6, 8]) и этот аргумент мы можем исп-ть внутри функции;
- i - это номер по порядку(индекс);
- ars - ссылка на тот массив кот. мы перебираем

Note: callback функция создается для того, чтобы выполнится строго после определенных действий
*/
const ars = [1, 2, 3, 6, 8];
ars.forEach(function (item, i, ars) {
  console.log(`${i}: ${item} внутри массива ${ars}`);
});

/* Вывод будет таким:
0: 1 внутри массива 1,2,3,6,8
1: 2 внутри массива 1,2,3,6,8
2: 3 внутри массива 1,2,3,6,8
3: 6 внутри массива 1,2,3,6,8
4: 8 внутри массива 1,2,3,6,8 */

// метод split() - разделение элементов в массиве, исп-м разделители:';' ',' '.'
// метод join( ) - оъединение элементов в массиве
const str = prompt('', '');
const products = str.split(', ');
products.sort();
console.log(products.join('; ')); // склеил массив разделив элементы через ';'

/* метод sort() - сортирует массив по порядку, если там строки;
- этот метод изначально сортирует все как строки
- также, метод sort()- во внутрь может принимать callback функцию*/

//шаблон сортировки для чисел:

const arss = [1, 62, 13, 6, 8];
arss.sort(compareNum); // передаем callback функцию
console.log(arss);

// пишем callback функцию:
function compareNum(a, b) {
  return a - b; // числа отсортируются правильно
}
/* как это работает: метод sort() внутри себя испо-т алгоритм быстрой сортировки */

//псевдомассивы не имеют методы - это просто структура, кот. хранит данные по порядку
